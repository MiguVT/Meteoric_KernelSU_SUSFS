name: Nothing Phone Kernel Build Process
permissions:
  contents: write
  actions: write

on:
  workflow_call:
    inputs:
      os_patch_level:
        required: false
        type: string
        default: '2024-12'
      revision:
        required: false
        type: string
        default: 'r1'

jobs:
  build-nothing-kernel:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      matrix:
        build_type: ['make', 'normal']

    steps:
      # # - name: Maximize Build Space
      # uses: AdityaGarg8/remove-unwanted-software@v5
      # with:
      # remove-dotnet: 'true'          # Frees ~2 GB
      # remove-android: 'true'         # Frees ~9 GB
      # remove-haskell: 'true'         # Frees ~5.2 GB
      # remove-codeql: 'true'          # Frees ~5.4 GB
      # remove-docker-images: 'true'   # Frees ~3.2 GB
      # remove-large-packages: 'true'  # Frees ~3.1 GB
      # remove-swapfile: 'true'        # Frees ~4 GB
      # remove-cached-tools: 'false'   # Avoid unless confirmed safe
      # verbose: 'true'                # Enable detailed logging

      - name: Set CONFIG Environment Variable
        run: |
          # Set CONFIG for Nothing Phone kernel (Android 12 5.10)
          CONFIG="nothing-android12-5.10"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

      - name: Setup Build Environment
        run: |
          sudo apt update && sudo apt install -y libelf-dev libssl-dev build-essential

          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-2025
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools &
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg &
          wait

          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
          echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          echo "PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin:$PATH" >> $GITHUB_ENV

          # Repo tool not needed for direct git clone

      - name: Set boot sign key
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          if [ ! -z "$BOOT_SIGN_KEY" ]; then
            echo "$BOOT_SIGN_KEY" > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
          fi

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-android12-5.10"

          git clone https://github.com/WildKernels/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/WildKernels/kernel_patches.git

      - name: Clone Kernel Source
        run: |
          mkdir -p "$CONFIG"
          cd "$CONFIG"

          # Clone the Nothing Phone kernel from the specified repository
          git clone --depth=1 -b clean https://github.com/MiguVT/kernel_nothing_sm8475_github_actions.git common

          echo "Kernel source cloned successfully from Nothing Phone repository"

      # Sublevel extraction not needed for fixed Nothing Phone kernel

      # glibc compatibility fix not needed for Android 12 5.10

      # Kernel 6.6 fixes not needed for Android 12 5.10

      # Ptrace patch not needed for Android 12 5.10 Nothing Phone kernel

      - name: Add KernelSU
        run: |
          cd "$CONFIG"
          curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash -s wild

      - name: Apply SUSFS Patches for KernelSU Variants
        run: |
          cd "$CONFIG"

          # Apply core SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android12-5.10.patch ./common/
          cd common
          patch -p1 --forward < 50_add_susfs_in_gki-android12-5.10.patch
          cd ..
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          # Apply KSU integration patches
          cd ./Wild_KSU
          cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch .
          #cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/10_enable_susfs_for_ksu.patch ./
          patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true

          # Apply compatibility fixes
          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_core_hook.c.patch ./
          patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch

          # Skipping fix_rules.c.patch as it's not needed for Nothing Phone Android 12 5.10

          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_sucompat.c.patch ./
          patch -p1 --forward < fix_sucompat.c.patch

          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_kernel_compat.c.patch ./
          patch -p1 --forward < fix_kernel_compat.c.patch

      - name: Getting KernelSU Version
        run: |
          cd "$CONFIG/Wild_KSU/kernel"
          BASE_VERSION=10200
          COMMIT_COUNT=$(/usr/bin/git rev-list --count HEAD)
          KSU_VERSION=$(expr $COMMIT_COUNT "+" $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

      - name: Apply Hooks Patches
        run: |
          cd "$CONFIG/common"
          cp ../../kernel_patches/wild/hooks/scope_min_manual_hooks_v1.4.patch ./
          patch -p1 --forward -F 3 < scope_min_manual_hooks_v1.4.patch

      - name: Apply Module Symbol Version Fix Patch
        run: |
          # Module symbol version fix for 5.10 kernel
          cd "$CONFIG/common/kernel"
          #sed -i 's/pr_warn("%s: disagrees about version of symbol %s\\n"/pr_warn("%s: disagrees about version of symbol %s, but ignore...\\n"/' module.c
          sed -i '/bad_version:/{:a;n;/return 0;/{s/return 0;/return 1;/;b};ba}' module.c

      # WiFi and Bluetooth Samsung fix only needed for 6.6 kernels, not for 5.10

      - name: Apply Kernel Configuration
        run: |
          cd "$CONFIG"

          defconfig="./common/arch/arm64/configs/vendor/meteoric_defconfig"

          echo "Using Nothing Phone meteoric_defconfig..."

          # KernelSU Core Configuration
          echo "CONFIG_KSU=y" >> "$defconfig"
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> "$defconfig"

          # SUSFS Configuration
          echo "CONFIG_KSU_SUSFS=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$defconfig"

          # SUSFS Auto Mount Features
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$defconfig"

          # SUSFS Advanced Features
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$defconfig"

          # SUSFS Debugging and Security
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$defconfig"

          # Build Optimization Configuration
          echo "CONFIG_LTO_CLANG_THIN=y" >> "$defconfig"
          echo "CONFIG_LTO_CLANG=y" >> "$defconfig"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> "$defconfig"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n" >> "$defconfig"

          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Change Kernel Name
        run: |
          cd "$CONFIG"

          perl -pi -e 's/-dirty//' ./common/scripts/setlocalversion
          perl -pi -e 's/-maybe-dirty//g' ./build/kernel/kleaf/impl/stamp.bzl

          #Set Kernel Timestamp
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Sun Apr 20 04:20:00 UTC 2025"}' ./common/scripts/mkcompile_h

          #Set Kernel Name for Nothing Phone Android 12 5.10
          if [ "${{ matrix.build_type }}" = "make" ]; then
            perl -0777 -pi -e 's/(echo "\$res")(?!.*echo "\$res")/echo "\-android12-Wild"/s' ./common/scripts/setlocalversion
          elif [ "${{ matrix.build_type }}" = "normal" ]; then
            perl -0777 -pi -e 's/(echo "\$res")(?!.*echo "\$res")/echo "\$res-Wild"/s' ./common/scripts/setlocalversion
          fi

          #Set Kernel Timestamp
          perl -pi -e 's/build-timestamp = \$\(or \$\(KBUILD_BUILD_TIMESTAMP\), \$\(build-timestamp-auto\)\)/build-timestamp = "Sun Apr 20 04:20:00 UTC 2025"/' ./common/init/Makefile

          #Remove Abi Exports and Error
          rm -rf ./common/android/abi_gki_protected_exports_*
          perl -pi -e 's/^\s*"protected_exports_list"\s*:\s*"android\/abi_gki_protected_exports_aarch64",\s*$//;' ./common/BUILD.bazel

      - name: Build
        if: ${{ matrix.build_type == 'normal' }}
        run: |
          set -e
          set -x
          cd "$CONFIG"
          echo "Building the kernel..."
          if [ -f "build/build.sh" ]; then
            LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh || exit 1
          else
            tools/bazel build --config=fast --lto=thin //common:kernel_aarch64_dist || exit 1
          fi

      - name: Detect Clang Version from Configs
        if: ${{ matrix.build_type == 'make' }}
        run: |
          KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG"
          DEFCONFIG="$KERNEL_PATH/common/arch/arm64/configs/vendor/meteoric_defconfig"
          BUILDCONFIG="$KERNEL_PATH/common/build.config.gki"
          CONSTANTSCONFIG="$KERNEL_PATH/common/build.config.constants"
          CLANG_VERSION=""
          CLANG_BIN_PATH=""
          if grep -q '^CONFIG_CLANG_VERSION=' "$DEFCONFIG" 2>/dev/null; then
            CLANG_VERSION=$(grep '^CONFIG_CLANG_VERSION=' "$DEFCONFIG" 2>/dev/null | head -n1 | cut -d'=' -f2 | tr -d '"' | xargs)
          elif grep -q '^CLANG_VERSION=' "$BUILDCONFIG" 2>/dev/null; then
            CLANG_VERSION=$(grep '^CLANG_VERSION=' "$BUILDCONFIG" 2>/dev/null | head -n1 | cut -d'=' -f2 | xargs)
          elif grep -q '^CLANG_VERSION=' "$CONSTANTSCONFIG" 2>/dev/null; then
            CLANG_VERSION=$(grep '^CLANG_VERSION=' "$CONSTANTSCONFIG" 2>/dev/null | head -n1 | cut -d'=' -f2 | xargs)
            CLANG_VERSION="clang-$CLANG_VERSION"
          else
            echo "No clang version found in config, will auto-detect in prebuilts."
          fi
          if [ -z "$CLANG_VERSION" ]; then
            if [ -d "$KERNEL_PATH/prebuilts/clang/host/linux-x86" ]; then
              CLANG_VERSION=$(ls -d "$KERNEL_PATH"/prebuilts/clang/host/linux-x86/clang-r*/ | tail -n 1 | xargs basename)
              CLANG_BIN_PATH="$KERNEL_PATH/prebuilts/clang/host/linux-x86/$CLANG_VERSION/bin"
            elif [ -d "$KERNEL_PATH/prebuilts-master/clang/host/linux-x86" ]; then
              CLANG_VERSION=$(ls -d "$KERNEL_PATH"/prebuilts-master/clang/host/linux-x86/clang-r*/ | tail -n 1 | xargs basename)
              CLANG_BIN_PATH="$KERNEL_PATH/prebuilts-master/clang/host/linux-x86/$CLANG_VERSION/bin"
            else
              CLANG_VERSION="clang"
              CLANG_BIN_PATH="$KERNEL_PATH/prebuilts/clang/host/linux-x86/$CLANG_VERSION/bin" # dummy
            fi
          else
            if [ -d "$KERNEL_PATH/prebuilts/clang/host/linux-x86" ]; then
              CLANG_BIN_PATH="$KERNEL_PATH/prebuilts/clang/host/linux-x86/$CLANG_VERSION/bin"
            else
              CLANG_BIN_PATH="$KERNEL_PATH/prebuilts-master/clang/host/linux-x86/$CLANG_VERSION/bin"
            fi
          fi
          echo "CLANG_VERSION=$CLANG_VERSION" >> $GITHUB_ENV
          echo "CLANG_BIN_PATH=$CLANG_BIN_PATH" >> $GITHUB_ENV

      - name: Build Kernel
        if: ${{ matrix.build_type == 'make' }}
        run: |
          KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG"
          CLANG_BIN_PATH="${{ env.CLANG_BIN_PATH }}"
          CLANG_VERSION="${{ env.CLANG_VERSION }}"

          if [ -d "$CLANG_BIN_PATH" ] && [ -x "$CLANG_BIN_PATH/clang" ]; then
            export PATH="$CLANG_BIN_PATH:$PATH"
            SELECTED_CLANG="$CLANG_BIN_PATH/clang"
          elif command -v clang >/dev/null 2>&1; then
            SELECTED_CLANG="$(command -v clang)"
            exit 1
          else
            exit 1
          fi

          LLVM_TOOLS="clang ld.lld llvm-ar llvm-objcopy llvm-objdump llvm-nm"
          MISSING_TOOLS=""
          for tool in $LLVM_TOOLS; do
            if ! command -v $tool >/dev/null 2>&1; then
              MISSING_TOOLS="$MISSING_TOOLS $tool"
            fi
          done

          if [ -n "$MISSING_TOOLS" ]; then
            sudo apt-get update
            sudo apt-get install -yq --no-install-recommends llvm
            for tool in $MISSING_TOOLS; do
              if ! command -v $tool >/dev/null 2>&1; then
                exit 1
              fi
            done
          fi

          # Set LLVM_IAS for 5.10 kernel
          USE_LLVM_IAS=true

          cd "$KERNEL_PATH/common" || exit 1

          MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- \
            RUSTC=$KERNEL_PATH/prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
            PAHOLE=$KERNEL_PATH/prebuilts/kernel-build-tools/linux-x86/bin/pahole \
            LD=ld.lld HOSTLD=ld.lld"
          if [[ -v USE_LLVM_IAS ]]; then
            MAKE_ARGS="LLVM_IAS=1 $MAKE_ARGS"
          fi

          make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="-Wno-error -O2 -flto=thin -fno-stack-protector" vendor/meteoric_defconfig Image Image.gz Image.lz4 || exit 1
          make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="-Wno-error -O2 -flto=thin -fno-stack-protector" || exit 1

      - name: Create AK3 ZIP
        run: |
          # Try different Image locations based on build type
          if [ -f "$CONFIG/common/out/arch/arm64/boot/Image" ]; then
            cp $CONFIG/common/out/arch/arm64/boot/Image AnyKernel3/Image
          elif [ -f "./$CONFIG/out/nothing-android12-5.10/dist/Image" ]; then
            cp ./$CONFIG/out/nothing-android12-5.10/dist/Image AnyKernel3/Image
          elif [ -f "./$CONFIG/bazel-bin/common/kernel_aarch64/Image" ]; then
            cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image AnyKernel3/Image
          else
            echo "Error: Image file not found in any expected location"
            exit 1
          fi

          cd AnyKernel3

          # Fixed naming for Nothing Phone kernel
          ZIP_NAME="WKSU-$KSUVER-nothing-android12-5.10-AnyKernel3.zip"
          zip -r "../$ZIP_NAME" ./*

      - name: Create Bootimgs Folder and Copy Images (Make Build)
        if: ${{ matrix.build_type == 'make' }}
        run: |
          mkdir bootimgs

          echo "Creating bootimgs folder and copying images..."
          cp $CONFIG/common/out/arch/arm64/boot/Image ./bootimgs
          cp $CONFIG/common/out/arch/arm64/boot/Image.gz ./bootimgs
          cp $CONFIG/common/out/arch/arm64/boot/Image.lz4 ./bootimgs
          cp $CONFIG/common/out/arch/arm64/boot/Image ./
          cp $CONFIG/common/out/arch/arm64/boot/Image.gz ./
          cp $CONFIG/common/out/arch/arm64/boot/Image.lz4 ./

      - name: Create Bootimgs Folder and Copy Images (Normal Build)
        if: ${{ matrix.build_type == 'normal' }}
        run: |
          mkdir bootimgs

          echo "Creating bootimgs folder and copying images..."
          # Try different Image locations based on kernel structure
          if [ -f "./$CONFIG/out/android12-5.10/dist/Image" ]; then
            cp ./$CONFIG/out/android12-5.10/dist/Image ./bootimgs
            cp ./$CONFIG/out/android12-5.10/dist/Image.lz4 ./bootimgs
            cp ./$CONFIG/out/android12-5.10/dist/Image ./
            cp ./$CONFIG/out/android12-5.10/dist/Image.lz4 ./
          elif [ -f "./$CONFIG/bazel-bin/common/kernel_aarch64/Image" ]; then
            cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image ./bootimgs
            cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image.lz4 ./bootimgs
            cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image ./
            cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image.lz4 ./
          fi

          # Create gzip of the Image file
          gzip -n -k -f -9 ./Image > ./Image.gz
          gzip -n -k -f -9 ./Image > ./bootimgs/Image.gz

      # Android 14/15 image creation not needed for Nothing Phone Android 12 kernel

      - name: Android 12 boot image build script (Nothing Phone)
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd bootimgs

          # Fixed naming for Nothing Phone kernel
          KERNEL_NAME="nothing-android12-5.10"

          GKI_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-"${{ inputs.os_patch_level || '2024-12' }}"_"${{ inputs.revision || 'r1' }}".zip
          FALLBACK_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-2024-12_r1.zip

          # Check if the GKI URL is available
          echo "Checking if GKI kernel URL is reachable: $GKI_URL"
          status=$(curl -sL -w "%{http_code}" "$GKI_URL" -o /dev/null)

          if [ "$status" = "200" ]; then
              echo "[+] Downloading from GKI_URL"
              curl -Lo gki-kernel.zip "$GKI_URL"
          else
              echo "[+] $GKI_URL not found, using $FALLBACK_URL"
              curl -Lo gki-kernel.zip "$FALLBACK_URL"
          fi

          # Unzip the downloaded kernel and remove the zip
          echo "Unzipping the downloaded kernel..."
          unzip gki-kernel.zip && rm gki-kernel.zip

          echo "Unpacking boot.img..."
          FULL_PATH=$(pwd)/boot-5.10.img
          echo "Unpacking using: $FULL_PATH"

          echo "Running unpack_bootimg.py..."
          $UNPACK_BOOTIMG --boot_img="$FULL_PATH"

          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level || '2024-12' }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../WKSU-$KSUVER-nothing-android12-5.10-boot.img

          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level || '2024-12' }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../WKSU-$KSUVER-nothing-android12-5.10-boot-gz.img

          echo "Building boot-lz4.img"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level || '2024-12' }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../WKSU-$KSUVER-nothing-android12-5.10-boot-lz4.img

      # Android 13/14/15 boot image build not needed for Nothing Phone Android 12 kernel

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: WKSU-${{ env.KSUVER }}-nothing-android12-5.10-${{ matrix.build_type }}
          path: |
            *.zip
            *.img
