name: Nothing Phone Kernel Build Process
permissions:
  contents: write
  actions: write

on:
  workflow_call:
    inputs:
      os_patch_level:
        required: false
        type: string
        default: 'lts'
      revision:
        required: false
        type: string
        default: 'r1'
      sub_level:
        required: false
        type: string
        default: 'X'

jobs:
  build-nothing-kernel:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Check Initial Disk Space
        run: |
          echo "===== Initial Total Disk Space in GB ====="
          df -BG

      - name: Download Apache Arrow's util_free_space.sh
        run: |
          curl -L -o util_free_space.sh https://raw.githubusercontent.com/apache/arrow/main/ci/scripts/util_free_space.sh
          chmod +x util_free_space.sh
          ./util_free_space.sh

      - name: Check Disk Space After Cleanup
        run: |
          echo "===== Total Disk Space After Cleanup in GB ====="
          df -BG

      - name: Set CONFIG Environment Variable
        run: |
          # Set CONFIG for Nothing Phone kernel (Android 12 5.10)
          CONFIG="nothing-android12-5.10"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

      - name: Setup Build Environment
        run: |
          sudo apt update && sudo apt install -y libelf-dev libssl-dev build-essential

          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-2025
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools &
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg &
          wait

          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
          echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          echo "PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin:$PATH" >> $GITHUB_ENV

          # Repo tool not needed for direct git clone

      - name: Set boot sign key
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          if [ ! -z "$BOOT_SIGN_KEY" ]; then
            echo "$BOOT_SIGN_KEY" > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
          fi

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-android12-5.10"

          git clone https://github.com/WildKernels/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/WildKernels/kernel_patches.git

          # Checkout specific commits for SUSFS v1.5.9 if enabled
          if [ "${{ matrix.apply_susfs_v1_5_9 }}" = "v1.5.9" ]; then
            cd susfs4ksu
            git checkout 6f42c0e24e35a6fa0fc43051a5f1e7dfe568e8c2
            cd ..
          fi

      - name: Clone Kernel Source
        run: |
          mkdir -p "$CONFIG"
          cd "$CONFIG"

          # Clone the Nothing Phone kernel from the specified repository
          git clone --depth=1 -b clean https://github.com/MiguVT/kernel_nothing_sm8475_github_actions.git common

          echo "Kernel source cloned successfully from Nothing Phone repository"

      - name: Check Directory Space Usage
        run: |
          echo "===== Total Disk Space After Kernel Download in GB ====="
          df -BG

          echo "===== Directory Space Usage in GB ====="
          du -BG -d 1 | sort -nr

          echo "===== $CONFIG Directory Space Usage in GB ====="
          cd "$CONFIG"
          du -BG -d 2 | sort -nr

      - name: Extract Actual Sublevel for LTS Builds
        if: inputs.sub_level == 'X'
        run: |
          cd "$CONFIG/common"

          if [ -f "Makefile" ]; then
            ACTUAL_SUBLEVEL=$(grep '^SUBLEVEL = ' Makefile | awk '{print $3}')

            if [ -n "$ACTUAL_SUBLEVEL" ]; then
              echo "ACTUAL_SUBLEVEL=$ACTUAL_SUBLEVEL" >> $GITHUB_ENV
              echo "Found actual sublevel: $ACTUAL_SUBLEVEL"
            else
              echo "ACTUAL_SUBLEVEL=X" >> $GITHUB_ENV
              echo "Could not extract sublevel, using X"
            fi
          else
            echo "ACTUAL_SUBLEVEL=X" >> $GITHUB_ENV
            echo "Makefile not found, using X"
          fi

      # Sublevel extraction not needed for fixed Nothing Phone kernel

      # glibc compatibility fix not needed for Android 12 5.10

      # Kernel 6.6 fixes not needed for Android 12 5.10

      # Ptrace patch not needed for Android 12 5.10 Nothing Phone kernel

      - name: Add KernelSU
        run: |
          cd "$CONFIG"
          curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash -s wild

      - name: Getting KernelSU Version
        run: |
          cd "$CONFIG/Wild_KSU/kernel"
          BASE_VERSION=10200
          COMMIT_COUNT=$(/usr/bin/git rev-list --count HEAD)
          KSU_VERSION=$(expr $COMMIT_COUNT "+" $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

      - name: Apply SUSFS Patches for KernelSU Variants
        run: |
          cd "$CONFIG"

          # Apply compatibility fixes
          SUSFS_VERSION="1.5.12"

          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          # Apply core SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android12-5.10.patch ./common/
          cd common
          patch -p1 < 50_add_susfs_in_gki-android12-5.10.patch || true

          # Apply KSU integration patches
          cd ../Wild_KSU
          cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch .
          patch -p1 < 10_enable_susfs_for_ksu.patch || true

          cp ../../kernel_patches/wild/susfs_fix_patches/v${SUSFS_VERSION}/fix_core_hook.c.patch ./
          patch -p1 < fix_core_hook.c.patch

          cp ../../kernel_patches/wild/susfs_fix_patches/v${SUSFS_VERSION}/fix_sucompat.c.patch ./
          patch -p1 < fix_sucompat.c.patch

          cp ../../kernel_patches/wild/susfs_fix_patches/v${SUSFS_VERSION}/fix_kernel_compat.c.patch ./
          patch -p1 < fix_kernel_compat.c.patch

      - name: Apply Hooks Patches
        run: |
          cd "$CONFIG/common"
          cp ../../kernel_patches/wild/hooks/scope_min_manual_hooks_v1.4.patch ./
          patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch

      - name: Scan and collect patch rejects
        if: ${{ always() }}
        run: |
          set -e
          CONFIG_DIR="$CONFIG"
          REJECTS_DIR="$GITHUB_WORKSPACE/patch-rejects"
          mkdir -p "$REJECTS_DIR"
          # Find all .rej files under the configuration directory
          mapfile -t REJS < <(find "$CONFIG_DIR" -type f -name '*.rej')
          REJ_COUNT=${#REJS[@]}
          echo "Found $REJ_COUNT .rej files under $CONFIG_DIR"
          echo "REJ_COUNT=$REJ_COUNT" >> $GITHUB_ENV
          if [ "$REJ_COUNT" -gt 0 ]; then
            for REJ in "${REJS[@]}"; do
              # Relative path from $CONFIG
              REL="${REJ#"$CONFIG_DIR"/}"
              DEST="$REJECTS_DIR/$REL"
              mkdir -p "$(dirname "$DEST")"
              cp "$REJ" "$DEST"
              # Copy the associated original file alongside the .rej
              ORIG="${REJ%.rej}"
              if [ -f "$ORIG" ]; then
                ORIG_DEST="$REJECTS_DIR/${REL%.rej}"
                mkdir -p "$(dirname "$ORIG_DEST")"
                cp "$ORIG" "$ORIG_DEST"
              fi
              echo "$REL" >> "$REJECTS_DIR/index.txt"
            done
          fi

      - name: Add BBG
        run: |
          cd "$CONFIG"
          echo "Adding BBG..."
          wget -O- https://github.com/vc-teahouse/Baseband-guard/raw/main/setup.sh | bash
          echo "CONFIG_BBG=y" >> common/arch/arm64/configs/gki_defconfig
          sed -i '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ { /baseband_guard/! s/lockdown/lockdown,baseband_guard/ } }' common/security/Kconfig

      - name: Apply Module Symbol Version Fix Patch
        run: |
          # Module symbol version fix for 5.10 kernel
          cd "$CONFIG/common/kernel"
          #sed -i 's/pr_warn("%s: disagrees about version of symbol %s\\n"/pr_warn("%s: disagrees about version of symbol %s, but ignore...\\n"/' module.c
          sed -i '/bad_version:/{:a;n;/return 0;/{s/return 0;/return 1;/;b};ba}' module.c

      # WiFi and Bluetooth Samsung not needed (Nothing Phone has no Samsung modules and if they had, wouldn't be needed in android12-5.10)

      - name: Set Kernel Configuration Variables
        run: |
          cd "$CONFIG"

          echo "Initializing kernel configuration..."
          echo "DEFCONFIG=./common/arch/arm64/configs/vendor/meteoric_defconfig" >> $GITHUB_ENV

          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Configure KernelSU Core
        run: |
          cd "$CONFIG"
          # KernelSU Configuration
          echo "# KernelSU Configuration" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> "${{ env.DEFCONFIG }}"

      - name: Configure Mountify Support
        run: |
          cd "$CONFIG"
          # Mountify Support
          echo "# Mountify Support" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_TMPFS_XATTR=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "${{ env.DEFCONFIG }}"

      - name: Configure Networking
        run: |
          cd "$CONFIG"
          # Networking Configuration
          echo "# Networking Configuration" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "${{ env.DEFCONFIG }}"

      - name: Configure TCP Congestion Control
        run: |
          cd "$CONFIG"
          # BBR TCP Congestion Control
          echo "# BBR TCP Congestion Control" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_TCP_CONG_BBR=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_NET_SCH_FQ=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_TCP_CONG_BIC=n" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "${{ env.DEFCONFIG }}"

      - name: Configure IPSet Support
        run: |
          cd "$CONFIG"
          # IPSet support
          echo "# IPSet Support" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_MAX=65534" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_BITMAP_IP=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_BITMAP_IPMAC=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_BITMAP_PORT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_IP=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_IPMARK=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_IPPORT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_IPPORTIP=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_IPPORTNET=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_IPMAC=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_MAC=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_NETPORTNET=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_NET=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_NETNET=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_NETPORT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_NETIFACE=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_LIST_SET=y" >> "${{ env.DEFCONFIG }}"

      - name: Configure SUSFS
        run: |
          cd "$CONFIG"
          # SUSFS Configuration
          echo "# SUSFS Configuration" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS=y" >> "${{ env.DEFCONFIG }}"
          echo "#CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "${{ env.DEFCONFIG }}"

      - name: Configure Sound
        if: false
        run: |
          cd "$CONFIG"
          # Sound Configuration
          echo "# Sound Configuration" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_SND=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_SND_DRIVERS=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_SND_PCM=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_SND_TIMER=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_SND_DYNAMIC_MINORS=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_SND_PROC_FS=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_SND_ALOOP=m" >> "${{ env.DEFCONFIG }}"

          # Add snd-aloop.ko to modules list
          if [ -f "build/build.sh" ]; then
            echo "sound/drivers/snd-aloop.ko" >> common/android/gki_aarch64_modules
          else
            sed -i '/_COMMON_GKI_MODULES_LIST = \\[/,/\\]/ s/\\]/    "sound\/drivers\/snd-aloop.ko",\\n&/' common/modules.bzl
          fi

          # Add symbols to abi_gki_aarch64
          SYMBOL_LIST=common/android/abi_gki_aarch64
          cat Wild_KSU/kernel/export_symbol.txt | awk '{sub("[ \t]+","");print "  "$0}' >> $SYMBOL_LIST

      - name: Configure Build Optimization
        run: |
          cd "$CONFIG"
          # Build Optimization Configuration
          echo "# Build Optimization Configuration" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_LTO_CLANG_THIN=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_LTO_CLANG=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_OPTIMIZE_INLINING=y" >> "${{ env.DEFCONFIG }}"

      - name: Change Kernel Name
        run: |
          cd "$CONFIG"

          perl -pi -e 's/-dirty//' ./common/scripts/setlocalversion
          #Set Kernel Timestamp
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Sun Apr 20 04:20:00 UTC 2025"}' ./common/scripts/mkcompile_h

          #Set Kernel Name for Nothing Phone Android 12 5.10 (make build)
          perl -0777 -pi -e 's/(echo "\$res")(?!.*echo "\$res")/echo "\-android12-Wild"/s' ./common/scripts/setlocalversion

          #Set Kernel Timestamp
          perl -pi -e 's/build-timestamp = \$\(or \$\(KBUILD_BUILD_TIMESTAMP\), \$\(build-timestamp-auto\)\)/build-timestamp = "Sun Apr 20 04:20:00 UTC 2025"/' ./common/init/Makefile

      - name: Setup Clang Compiler
        run: |
          # Use system Clang since Nothing Phone kernel doesn't have prebuilts
          sudo apt-get update
          sudo apt-get install -yq --no-install-recommends clang llvm lld gcc-aarch64-linux-gnu

          # Verify Clang installation
          clang --version
          ld.lld --version
          aarch64-linux-gnu-gcc --version

      - name: Set file name
        run: |
          # Set artifact name base for consistent naming

          # Prepare sublevel for naming
          SUBLEVEL_FOR_NAME="${{ env.ACTUAL_SUBLEVEL }}"
          if [ -z "$SUBLEVEL_FOR_NAME" ] || [ "$SUBLEVEL_FOR_NAME" = "X" ]; then
            SUBLEVEL_FOR_NAME="${{ inputs.sub_level }}"
          fi

          # Set artifact name base for consistent naming
          ARTIFACT_BASE="WKSU-${{ env.KSUVER }}-nothing-android12-5.10.${SUBLEVEL_FOR_NAME}-${{ inputs.os_patch_level }}-Normal"
          echo "ARTIFACT_BASE=$ARTIFACT_BASE" >> $GITHUB_ENV
          echo "FILE_NAME=$ARTIFACT_BASE" >> $GITHUB_ENV

          # Debug output to show the actual artifact name being used
          echo "🔍 DEBUG: Generated artifact name: $ARTIFACT_BASE"
          echo "🔍 DEBUG: Runtime values - Run ID: ${{ github.run_id }}, Job: ${{ github.job }}, KSU Version: ${{ env.KSUVER }}, Sublevel: $SUBLEVEL_FOR_NAME"

      - name: Search for Kernel Modules
        run: |
          echo "Searching for kernel modules (.ko files)..."

          # Function to scan for modules (search only)
          scan_modules() {
            local search_dir="$1"
            local module_count=0

            if [ -d "$search_dir" ]; then
              echo "Scanning directory: $search_dir"

              # Find all .ko files and report their locations
              while IFS= read -r -d '' module_file; do
                if [ -f "$module_file" ]; then
                  module_name=$(basename "$module_file")
                  echo "Found module: $module_name in $(dirname "$module_file")"
                  ((module_count++))
                fi
              done < <(find "$search_dir" -name "*.ko" -type f -print0 2>/dev/null)
            fi

            return $module_count
          }

          # Scan common build output directories
          total_modules=0

          # Scan bazel-bin directory
          if scan_modules "./$CONFIG/bazel-bin"; then
            total_modules=$((total_modules + $?))
          fi

          # Scan out directory
          if scan_modules "./$CONFIG/out"; then
            total_modules=$((total_modules + $?))
          fi

          # Scan dist directory specifically - use ACTUAL_SUBLEVEL with fallback
          SUBLEVEL="${{ env.ACTUAL_SUBLEVEL }}"
          if [ -z "$SUBLEVEL" ] || [ "$SUBLEVEL" = "X" ]; then
            SUBLEVEL="${{ inputs.sub_level }}"
          fi
          if scan_modules "./$CONFIG/out/12-5.10.$SUBLEVEL/dist"; then
            total_modules=$((total_modules + $?))
          fi

          # Look for snd-aloop.ko specifically
          echo "Searching specifically for snd-aloop.ko..."
          snd_aloop_found=$(find ./$CONFIG -name "snd-aloop.ko" -type f 2>/dev/null | head -1)
          if [ -n "$snd_aloop_found" ]; then
            echo "Found snd-aloop.ko at: $snd_aloop_found"
          else
            echo "snd-aloop.ko not found"
          fi

          echo "Total kernel modules found: $total_modules"

      - name: Build Kernel
        run: |
          KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG"

          cd "$KERNEL_PATH/common" || exit 1

          # Build arguments for Nothing Phone kernel with system toolchain
          MAKE_ARGS="LLVM=1 LLVM_IAS=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- LD=ld.lld HOSTLD=ld.lld"

          # Build the kernel
          make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="-Wno-error -O2" vendor/meteoric_defconfig || exit 1
          make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="-Wno-error -O2" Image Image.gz Image.lz4 || exit 1

      - name: Prepare AnyKernel3
        run: |
          # Copy Image from make build output
          if [ -f "$CONFIG/common/out/arch/arm64/boot/Image" ]; then
            cp $CONFIG/common/out/arch/arm64/boot/Image AnyKernel3/Image
          else
            echo "Error: Image file not found in expected location"
            exit 1
          fi

      - name: Create Bootimgs Folder and Copy Images
        run: |
          mkdir bootimgs

          # Copy kernel images to bootimgs directory
          if [ -f "$CONFIG/common/out/arch/arm64/boot/Image" ]; then
            cp $CONFIG/common/out/arch/arm64/boot/Image bootimgs/Image
            echo "Copied Image to bootimgs/"
          else
            echo "Error: Image file not found"
            exit 1
          fi

          if [ -f "$CONFIG/common/out/arch/arm64/boot/Image.gz" ]; then
            cp $CONFIG/common/out/arch/arm64/boot/Image.gz bootimgs/Image.gz
            echo "Copied Image.gz to bootimgs/"
          else
            echo "Error: Image.gz file not found"
            exit 1
          fi

          if [ -f "$CONFIG/common/out/arch/arm64/boot/Image.lz4" ]; then
            cp $CONFIG/common/out/arch/arm64/boot/Image.lz4 bootimgs/Image.lz4
            echo "Copied Image.lz4 to bootimgs/"
          else
            echo "Error: Image.lz4 file not found"
            exit 1
          fi

      - name: Android 12 boot image build script (Nothing Phone)
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd bootimgs

          GKI_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-"${{ inputs.os_patch_level || '2024-12' }}"_r1.zip
          FALLBACK_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-2023-01_r1.zip

          # Check if the GKI URL is available
          echo "Checking if GKI kernel URL is reachable: $GKI_URL"
          status=$(curl -sL -w "%{http_code}" "$GKI_URL" -o /dev/null)

          if [ "$status" = "200" ]; then
              echo "[+] Downloading from GKI_URL"
              curl -Lo gki-kernel.zip "$GKI_URL"
          else
              echo "[+] $GKI_URL not found, using $FALLBACK_URL"
              curl -Lo gki-kernel.zip "$FALLBACK_URL"
          fi

          # Unzip the downloaded kernel and remove the zip
          echo "Unzipping the downloaded kernel..."
          unzip gki-kernel.zip && rm gki-kernel.zip

          echo "Unpacking boot.img..."
          FULL_PATH=$(pwd)/boot-5.10.img
          echo "Unpacking using: $FULL_PATH"

          echo "Running unpack_bootimg.py..."
          $UNPACK_BOOTIMG --boot_img="$FULL_PATH"

          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level || '2024-12' }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../${{ env.FILE_NAME }}-boot.img

          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level || '2024-12' }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../${{ env.FILE_NAME }}-boot-gz.img

          echo "Building boot-lz4.img"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level || '2024-12' }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../${{ env.FILE_NAME }}-boot-lz4.img

      - name: Upload AnyKernel3 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-AnyKernel3
          path: |
            ./AnyKernel3/**
          compression-level: 9

      - name: Upload Boot Image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-boot.img
          path: |
            *-boot.img
          compression-level: 9

      - name: Upload Boot Image (GZ)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-boot-gz.img
          path: |
            *-boot-gz.img
          compression-level: 9

      - name: Upload Boot Image (LZ4)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-boot-lz4.img
          path: |
            *-boot-lz4.img
          compression-level: 9

      - name: Upload Raw Image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-Image
          path: |
            Image
          compression-level: 9

      - name: Upload Raw Image (GZ)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-Image.gz
          path: |
            Image.gz
          compression-level: 9

      - name: Upload Raw Image (LZ4)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-Image.lz4
          path: |
            Image.lz4
          compression-level: 9

      - name: Upload Build Diagnostics
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-Rejected-Patches
          path: patch-rejects
          compression-level: 9

      - name: Initialize Kernel Summary
        run: |
          echo "# Kernel Build Summary" >> $GITHUB_STEP_SUMMARY

          # Add build variant header
          echo "## ${{ env.FILE_NAME }}" >> $GITHUB_STEP_SUMMARY

      - name: Add Build Information
        run: |
          # Add build info - use ACTUAL_SUBLEVEL with fallback
          SUBLEVEL="${{ env.ACTUAL_SUBLEVEL }}"
          if [ -z "$SUBLEVEL" ] || [ "$SUBLEVEL" = "X" ]; then
            SUBLEVEL="${{ inputs.sub_level }}"
          fi
          echo "## Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Android Version**: 12" >> $GITHUB_STEP_SUMMARY
          echo "- **Kernel Version**: 5.10.$SUBLEVEL" >> $GITHUB_STEP_SUMMARY
          echo "- **BBG**: Installed" >> $GITHUB_STEP_SUMMARY
          echo "- **SUSFS**: v1.5.12" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      - name: Add KSU Version
        run: |
          # Get Wild_KSU commit
          cd "$CONFIG/Wild_KSU"
          WKSU_COMMIT=$(git rev-parse HEAD)
          WKSU_URL="https://github.com/WildKernels/Wild_KSU/commit/$WKSU_COMMIT"
          echo "- **Wild_KSU**: [$WKSU_COMMIT]($WKSU_URL)" >> $GITHUB_STEP_SUMMARY

      - name: Add BBG Version
        run: |
          cd "$CONFIG/Baseband-guard"
          BBG_COMMIT=$(git rev-parse HEAD)
          BBG_URL="https://github.com/vc-teahouse/Baseband-guard/commit/$BBG_COMMIT"
          echo "- **Baseband-guard**: [$BBG_COMMIT]($BBG_URL)" >> $GITHUB_STEP_SUMMARY

      - name: Add SUSFS Version
        run: |
          # Get SUSFS4KSU commit
          cd "$GITHUB_WORKSPACE/susfs4ksu"
          SUSFS_COMMIT=$(git rev-parse HEAD)
          SUSFS_URL="https://gitlab.com/simonpunk/susfs4ksu/-/commit/$SUSFS_COMMIT"
          echo "- **SUSFS4KSU (v1.5.12)**: [$SUSFS_COMMIT]($SUSFS_URL)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Add Build Artifacts
        run: |
          # Add links to the artifacts for this build
          echo "## Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **AnyKernel3**: [${{ env.FILE_NAME }}-AnyKernel3](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})" >> $GITHUB_STEP_SUMMARY

          echo "### Boot Images" >> $GITHUB_STEP_SUMMARY
          echo "- **Boot Image (RAW)**: [${{ env.FILE_NAME }}-boot.img](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})" >> $GITHUB_STEP_SUMMARY
          echo "- **Boot Image (GZ)**: [${{ env.FILE_NAME }}-boot-gz.img](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})" >> $GITHUB_STEP_SUMMARY
          echo "- **Boot Image (LZ4)**: [${{ env.FILE_NAME }}-boot-lz4.img](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})" >> $GITHUB_STEP_SUMMARY

          echo "### Kernel Images" >> $GITHUB_STEP_SUMMARY
          echo "- **Kernel Image (RAW)**: [${{ env.FILE_NAME }}-Image](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})" >> $GITHUB_STEP_SUMMARY
          echo "- **Kernel Image (GZ)**: [${{ env.FILE_NAME }}-Image.gz](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})" >> $GITHUB_STEP_SUMMARY
          echo "- **Kernel Image (LZ4)**: [${{ env.FILE_NAME }}-Image.lz4](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})" >> $GITHUB_STEP_SUMMARY

          echo "### Diagnostics" >> $GITHUB_STEP_SUMMARY
          echo "- **Rejected Patches**: [${{ env.FILE_NAME }}-Rejected-Patches](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})" >> $GITHUB_STEP_SUMMARY
