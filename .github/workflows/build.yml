name: Nothing Phone Kernel Build Process
permissions:
  contents: write
  actions: write

on:
  workflow_call:
    inputs:
      os_patch_level:
        required: false
        type: string
        default: 'lts'
      revision:
        required: false
        type: string
        default: 'r1'
      sub_level:
        required: false
        type: string
        default: 'X'

jobs:
  build-nothing-kernel:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      matrix:
        build_type: ['make']

    steps:
      # # - name: Maximize Build Space
      # uses: AdityaGarg8/remove-unwanted-software@v5
      # with:
      # remove-dotnet: 'true'          # Frees ~2 GB
      # remove-android: 'true'         # Frees ~9 GB
      # remove-haskell: 'true'         # Frees ~5.2 GB
      # remove-codeql: 'true'          # Frees ~5.4 GB
      # remove-docker-images: 'true'   # Frees ~3.2 GB
      # remove-large-packages: 'true'  # Frees ~3.1 GB
      # remove-swapfile: 'true'        # Frees ~4 GB
      # remove-cached-tools: 'false'   # Avoid unless confirmed safe
      # verbose: 'true'                # Enable detailed logging

      - name: Set CONFIG Environment Variable
        run: |
          # Set CONFIG for Nothing Phone kernel (Android 12 5.10)
          CONFIG="nothing-android12-5.10"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

      - name: Setup Build Environment
        run: |
          sudo apt update && sudo apt install -y libelf-dev libssl-dev build-essential

          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-2025
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools &
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg &
          wait

          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
          echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          echo "PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin:$PATH" >> $GITHUB_ENV

          # Repo tool not needed for direct git clone

      - name: Set boot sign key
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          if [ ! -z "$BOOT_SIGN_KEY" ]; then
            echo "$BOOT_SIGN_KEY" > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
          fi

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-android12-5.10"

          git clone https://github.com/WildKernels/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/WildKernels/kernel_patches.git

      - name: Clone Kernel Source
        run: |
          mkdir -p "$CONFIG"
          cd "$CONFIG"

          # Clone the Nothing Phone kernel from the specified repository
          git clone --depth=1 -b clean https://github.com/MiguVT/kernel_nothing_sm8475_github_actions.git common

          echo "Kernel source cloned successfully from Nothing Phone repository"

      - name: Extract Actual Sublevel for LTS Builds
        if: inputs.sub_level == 'X'
        run: |
          cd "$CONFIG/common"

          if [ -f "Makefile" ]; then
            ACTUAL_SUBLEVEL=$(grep '^SUBLEVEL = ' Makefile | awk '{print $3}')

            if [ -n "$ACTUAL_SUBLEVEL" ]; then
              echo "ACTUAL_SUBLEVEL=$ACTUAL_SUBLEVEL" >> $GITHUB_ENV
              echo "Found actual sublevel: $ACTUAL_SUBLEVEL"
            else
              echo "ACTUAL_SUBLEVEL=X" >> $GITHUB_ENV
              echo "Could not extract sublevel, using X"
            fi
          else
            echo "ACTUAL_SUBLEVEL=X" >> $GITHUB_ENV
            echo "Makefile not found, using X"
          fi

      # Sublevel extraction not needed for fixed Nothing Phone kernel

      # glibc compatibility fix not needed for Android 12 5.10

      # Kernel 6.6 fixes not needed for Android 12 5.10

      # Ptrace patch not needed for Android 12 5.10 Nothing Phone kernel

      - name: Add KernelSU
        run: |
          cd "$CONFIG"
          curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash -s wild

      - name: Apply SUSFS Patches for KernelSU Variants
        run: |
          cd "$CONFIG"

          # Apply core SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android12-5.10.patch ./common/
          cd common
          patch -p1 --forward < 50_add_susfs_in_gki-android12-5.10.patch
          cd ..
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          # Apply KSU integration patches
          cd ./Wild_KSU
          cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch .
          #cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/10_enable_susfs_for_ksu.patch ./
          patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true

          # Apply compatibility fixes
          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_core_hook.c.patch ./
          patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch

          # Skipping fix_rules.c.patch as it's not needed for Nothing Phone Android 12 5.10

          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_sucompat.c.patch ./
          patch -p1 --forward < fix_sucompat.c.patch

          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_kernel_compat.c.patch ./
          patch -p1 --forward < fix_kernel_compat.c.patch

      - name: Getting KernelSU Version
        run: |
          cd "$CONFIG/Wild_KSU/kernel"
          BASE_VERSION=10200
          COMMIT_COUNT=$(/usr/bin/git rev-list --count HEAD)
          KSU_VERSION=$(expr $COMMIT_COUNT "+" $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

      - name: Apply Hooks Patches
        run: |
          cd "$CONFIG/common"
          cp ../../kernel_patches/wild/hooks/scope_min_manual_hooks_v1.4.patch ./
          patch -p1 --forward -F 3 < scope_min_manual_hooks_v1.4.patch

      - name: Apply Module Symbol Version Fix Patch
        run: |
          # Module symbol version fix for 5.10 kernel
          cd "$CONFIG/common/kernel"
          #sed -i 's/pr_warn("%s: disagrees about version of symbol %s\\n"/pr_warn("%s: disagrees about version of symbol %s, but ignore...\\n"/' module.c
          sed -i '/bad_version:/{:a;n;/return 0;/{s/return 0;/return 1;/;b};ba}' module.c

      # WiFi and Bluetooth Samsung fix only needed for 6.6 kernels, not for 5.10

      - name: Apply Kernel Configuration
        run: |
          cd "$CONFIG"

          defconfig="./common/arch/arm64/configs/vendor/meteoric_defconfig"

          echo "Using Nothing Phone meteoric_defconfig..."

          # KernelSU Core Configuration
          echo "CONFIG_KSU=y" >> "$defconfig"
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> "$defconfig"

          # SUSFS Configuration
          echo "CONFIG_KSU_SUSFS=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$defconfig"

          # SUSFS Auto Mount Features
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$defconfig"

          # SUSFS Advanced Features
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$defconfig"

          # SUSFS Debugging and Security
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$defconfig"

          # Build Optimization Configuration
          echo "CONFIG_LTO_CLANG_THIN=y" >> "$defconfig"
          echo "CONFIG_LTO_CLANG=y" >> "$defconfig"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> "$defconfig"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n" >> "$defconfig"

          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Change Kernel Name
        run: |
          cd "$CONFIG"

          perl -pi -e 's/-dirty//' ./common/scripts/setlocalversion
          #Set Kernel Timestamp
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Sun Apr 20 04:20:00 UTC 2025"}' ./common/scripts/mkcompile_h

          #Set Kernel Name for Nothing Phone Android 12 5.10 (make build)
          perl -0777 -pi -e 's/(echo "\$res")(?!.*echo "\$res")/echo "\-android12-Wild"/s' ./common/scripts/setlocalversion

          #Set Kernel Timestamp
          perl -pi -e 's/build-timestamp = \$\(or \$\(KBUILD_BUILD_TIMESTAMP\), \$\(build-timestamp-auto\)\)/build-timestamp = "Sun Apr 20 04:20:00 UTC 2025"/' ./common/init/Makefile

      - name: Setup Clang Compiler
        run: |
          # Use system Clang since Nothing Phone kernel doesn't have prebuilts
          sudo apt-get update
          sudo apt-get install -yq --no-install-recommends clang llvm lld gcc-aarch64-linux-gnu

          # Verify Clang installation
          clang --version
          ld.lld --version
          aarch64-linux-gnu-gcc --version

      - name: Build Kernel
        run: |
          KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG"

          cd "$KERNEL_PATH/common" || exit 1

          # Build arguments for Nothing Phone kernel with system toolchain
          MAKE_ARGS="LLVM=1 LLVM_IAS=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- LD=ld.lld HOSTLD=ld.lld"

          # Build the kernel
          make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="-Wno-error -O2" vendor/meteoric_defconfig || exit 1
          make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="-Wno-error -O2" Image Image.gz Image.lz4 || exit 1

      - name: Create AK3 ZIP
        run: |
          # Copy Image from make build output
          if [ -f "$CONFIG/common/out/arch/arm64/boot/Image" ]; then
            cp $CONFIG/common/out/arch/arm64/boot/Image AnyKernel3/Image
          else
            echo "Error: Image file not found in expected location"
            exit 1
          fi

          cd AnyKernel3

          # Use actual sublevel for LTS builds if available
          SUBLEVEL_FOR_NAME="${{ inputs.sub_level }}"
          if [ -n "${{ env.ACTUAL_SUBLEVEL }}" ] && [ "${{ env.ACTUAL_SUBLEVEL }}" != "X" ]; then
            SUBLEVEL_FOR_NAME="${{ env.ACTUAL_SUBLEVEL }}"
          fi

          # Fixed naming for Nothing Phone kernel with LTS support
          ZIP_NAME="WKSU-$KSUVER-nothing-android12-5.10.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-AnyKernel3.zip"
          zip -r "../$ZIP_NAME" ./*

      - name: Create Bootimgs Folder and Copy Images
        run: |
          mkdir bootimgs

          echo "Creating bootimgs folder and copying images..."
          cp $CONFIG/common/out/arch/arm64/boot/Image ./bootimgs
          cp $CONFIG/common/out/arch/arm64/boot/Image.gz ./bootimgs
          cp $CONFIG/common/out/arch/arm64/boot/Image.lz4 ./bootimgs
          cp $CONFIG/common/out/arch/arm64/boot/Image ./
          cp $CONFIG/common/out/arch/arm64/boot/Image.gz ./
          cp $CONFIG/common/out/arch/arm64/boot/Image.lz4 ./

      # Android 14/15 image creation not needed for Nothing Phone Android 12 kernel

      - name: Android 12 boot image build script (Nothing Phone)
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd bootimgs

          # Prepare sublevel for naming
          SUBLEVEL_FOR_NAME="${{ inputs.sub_level }}"
          if [ -n "${{ env.ACTUAL_SUBLEVEL }}" ] && [ "${{ env.ACTUAL_SUBLEVEL }}" != "X" ]; then
            SUBLEVEL_FOR_NAME="${{ env.ACTUAL_SUBLEVEL }}"
          fi

          # Fixed naming for Nothing Phone kernel
          KERNEL_NAME="nothing-android12-5.10"

          GKI_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-"${{ inputs.os_patch_level || '2024-12' }}"_"${{ inputs.revision || 'r1' }}".zip
          FALLBACK_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-2025-06_r1.zip

          # Check if the GKI URL is available
          echo "Checking if GKI kernel URL is reachable: $GKI_URL"
          status=$(curl -sL -w "%{http_code}" "$GKI_URL" -o /dev/null)

          if [ "$status" = "200" ]; then
              echo "[+] Downloading from GKI_URL"
              curl -Lo gki-kernel.zip "$GKI_URL"
          else
              echo "[+] $GKI_URL not found, using $FALLBACK_URL"
              curl -Lo gki-kernel.zip "$FALLBACK_URL"
          fi

          # Unzip the downloaded kernel and remove the zip
          echo "Unzipping the downloaded kernel..."
          unzip gki-kernel.zip && rm gki-kernel.zip

          echo "Unpacking boot.img..."
          FULL_PATH=$(pwd)/boot-5.10.img
          echo "Unpacking using: $FULL_PATH"

          echo "Running unpack_bootimg.py..."
          $UNPACK_BOOTIMG --boot_img="$FULL_PATH"

          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level || '2024-12' }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../WKSU-$KSUVER-nothing-android12-5.10.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-boot.img

          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level || '2024-12' }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../WKSU-$KSUVER-nothing-android12-5.10.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-boot-gz.img

          echo "Building boot-lz4.img"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level || '2024-12' }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../WKSU-$KSUVER-nothing-android12-5.10.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-boot-lz4.img

      # Android 13/14/15 boot image build not needed for Nothing Phone Android 12 kernel

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: WKSU-${{ env.KSUVER }}-nothing-android12-5.10.${{ env.ACTUAL_SUBLEVEL || inputs.sub_level }}-${{ inputs.os_patch_level }}-make
          path: |
            *.zip
            *.img
